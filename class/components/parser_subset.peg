
{
    package components
}
    

// -------------------------------------------------------------------------
//  Class components
// -------------------------------------------------------------------------

CLASS_COMPONENT_TEST = (WHEN / COMMAND_HANDLER / PROPERTIES / CHECK / FUNCTION)* EOF

PROJECTION_BODY = (WHEN / PROPERTIES / CHECK / FUNCTION)*

WHEN = _ "when"i _ "event"i _ QUOTED_NAME _ "{" _ STATEMENT_BLOCK? _ "}" _

COMMAND_BODY = (COMMAND_HANDLER / PROPERTIES / CHECK / FUNCTION)*

COMMAND_HANDLER = _ "handler"i _ "{" _ COMMAND_STATEMENT_BLOCK? _ "}" _

COMMAND_STATEMENT_BLOCK = _ (COMMAND_STATEMENT)+ _

COMMAND_STATEMENT = STATEMENT / ASSERT / APPLY

ASSERT = _ "assert"i _ "invariant"i _ ("not"i)? _ QUOTED_NAME _ ARGUMENTS? SEMI

APPLY = _ "apply"i _ "event"i _ QUOTED_NAME _ ARGUMENTS? SEMI

VALUE_BODY = (VALUE_COMPONENTS)*

VALUE_COMPONENTS = PROPERTIES / CHECK / FUNCTION

PROPERTIES = _ "properties"i _ "{" PROPERTY_LIST "}" _

PROPERTY_LIST = (PROPERTY)*

PROPERTY = _ TYPE _ IDENTIFIER _ ";" _

CHECK = _ "check"i _ "(" STATEMENT_BLOCK? ")" _

FUNCTION = _ "function"i _ IDENTIFIER _ PARAMETERS  _ "{" _ STATEMENT_BLOCK? _ "}" _

PARAMETERS = "(" PARAMETER_LIST ")"

PARAMETER_LIST = _ (PARAMETER "," _ )* PARAMETER? _

PARAMETER = _ CLASS_REF _ IDENTIFIER _
// -------------------------------------------------------------------------
//  Statements
// -------------------------------------------------------------------------

STATEMENT_BLOCK = _ (STATEMENT)+ _

STATEMENT = RETURN SEMI / IF / FOREACH / EXPRESSION SEMI

IF = "if" _ EXPRESSION _ "{" _ STATEMENT_BLOCK? "}" _ ("else" _ "{" _ STATEMENT_BLOCK? "}" _)?

FOREACH = "foreach" _ "(" _ EXPRESSION _ "as" (_ IDENTIFIER _ "=>")? _ IDENTIFIER _ ")" _ "{" _ STATEMENT_BLOCK? "}"

RETURN = "return" _ EXPRESSION

// -------------------------------------------------------------------------
//  Expressions
// -------------------------------------------------------------------------

EXRESSION_TEST = EXPRESSION EOF

EXPRESSION = QUERY / ARITHMETIC / ASSIGNMENT/ LOGICAL / COMPARISON / ATOMIC

ATOMIC = PARENTHESIS / NEW / METHODCALL / OBJECTACCESS / LITERAL / UNARY

LITERAL = STRING / FLOAT / BOOLEAN / NULL / INT

NEW = CLASS_REF_QUOTES _ ARGUMENTS?

BOOLEAN  = "true"/"false"

NULL = "null"

STRING = "\"" [a-zA-Z0-9]* "\""

INT = [0-9]+

FLOAT = [0-9]+ [.] [0-9]+

PARENTHESIS = "(" _ EXPRESSION _ ")"

UNARY = INCREMENT / DECREMENT / NEGATE / NOT / POSITIVE

INCREMENT = OBJECTACCESS "++"

DECREMENT = OBJECTACCESS "--"

NEGATE = "-" OBJECTACCESS

NOT = "!" OBJECTACCESS

POSITIVE = "+" OBJECTACCESS

ARITHMETIC = ATOMIC _ OPERATOR _ EXPRESSION

OPERATOR = "+" / "-" / "/" / "*" / "%"

ASSIGNMENT = OBJECTACCESS _ "=" _ EXPRESSION

LOGICAL = IDENTIFIER _ ("and" / "or") _ ATOMIC

COMPARISON = IDENTIFIER _ ("===" / "!==" / "==" / "!=" / "<=" / ">=" / "<" / ">") _ EXPRESSION

QUERY = "run"i _ "query"i _ QUOTED_NAME _ ARGUMENTS?

OBJECTACCESS = ((METHODCALL / IDENTIFIER) "->")* (METHODCALL / IDENTIFIER)

METHODCALL = IDENTIFIER ARGUMENTS

ARGUMENTS = "(" ARGUMENTLIST? ")"

ARGUMENTLIST =  _ (_ EXPRESSION _ "," _)* EXPRESSION _


// -------------------------------------------------------------------------
//  Core
// -------------------------------------------------------------------------

CLASS_REF_QUOTES = _ "'" CLASS_REF "'"

CLASS_REF = _ CLASS_TYPE "\\" CLASS_NAME

CLASS_TYPE = _ ("value" / "entity" / "command" / "event" / "projection" / "invariant" / "query")

CLASS_NAME = [a-zA-Z]+ [a-zA-Z0-9_-]*

QUOTED_NAME = "'" CLASS_NAME "'"

TYPE = CLASS_REF / VALUE_TYPE

VALUE_TYPE = _ ("string" / "boolean" / "float" / "map")

CLASS_IMPLIED_REF = _ "'" CLASS_NAME "'"

IDENTIFIER = [a-zA-Z]+ [a-zA-Z0-9_]*

_ = ( WHITESPACE / EOL )*

SEMI = _ ";" _

WHITESPACE = [ \t\r]

EOL = '\n'

EOF = !.
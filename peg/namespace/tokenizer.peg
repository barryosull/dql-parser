
// -------------------------------------------------------------------------
//  Namespace
// -------------------------------------------------------------------------

FILE = STATEMENTS _ EOF

STATEMENTS = statements:(BLOCK_STATEMENT/ CREATE_OBJECT / CREATE_CLASS)*

CREATE_OBJECT = _ CREATE_NAMESPACE_OBJECT? _ NAMESPACE? _ ";" {
    return emit(Apostrophe, ";");
}

BLOCK_STATEMENT = _ NAMESPACE _ ":" _ "{" STATEMENTS _ "}"

CREATE_NAMESPACE_OBJECT = "create"i _ typ:NAMESPACE_OBJECT_TYPE _ name:QUOTED_NAME {
    emit(Create, "create");
    emit(NamespaceObject, typ);
    return emit(QuotedName, name);
}

NAMESPACE_OBJECT_TYPE = typ:("database" / "domain" / "context" / "aggregate") {
    return string(c.text), nil;
}

NAMESPACE = (USING_DATABASE / FOR_DOMAIN / IN_CONTEXT / WITHIN_AGGREGATE)*

USING_DATABASE = _ "using"i _ "database"i _ name:QUOTED_NAME {
    return emit(UsingDatabase, name);
}

FOR_DOMAIN = _ "for"i _ "domain"i _ name:QUOTED_NAME {
    return emit(ForDomain, name);
}

IN_CONTEXT = _ "in"i _ "context"i _ name:QUOTED_NAME {
    return emit(InContext, name);
}

WITHIN_AGGREGATE = _ "within"i _ "aggregate"i _ name:QUOTED_NAME {
    return emit(WithinAggregate, name);
}

CREATE_CLASS = _ CLASS_OPEN (CREATE_VALUE / CREATE_COMMAND / CREATE_PROJECTION / CREATE_INVARIANT / CREATE_QUERY) CLASS_CLOSE

CREATE_VALUE = _ ("value"i / "entity"i)  _ name:QUOTED_NAME _ NAMESPACE _ VALUE_BODY _ {
    emit(Class, "value");
    return emit(QuotedName, name);
}

CREATE_COMMAND = _ "command"i  _ QUOTED_NAME _ NAMESPACE _ COMMAND_BODY _

CREATE_PROJECTION = _ ("aggregate"i / "domain"i) _ "projection"i  _ QUOTED_NAME _ NAMESPACE _ PROJECTION_BODY _

CREATE_INVARIANT = _  "invariant"i  _ QUOTED_NAME _ "on"i _ CLASS_REF_QUOTES _ NAMESPACE _ INVARIANT_BODY _

CREATE_QUERY = _  "query"i  _ QUOTED_NAME _ "on"i _ CLASS_REF_QUOTES _ NAMESPACE _ QUERY_BODY _

CLASS_OPEN = "<|" {
    return emit(ClassOpen, string(c.text));
}

CLASS_CLOSE = "|>" {
   return emit(ClassOpen, string(c.text));
}


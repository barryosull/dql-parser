{
    package peg

    import (
        "fmt"
        "parser/ast"
        "github.com/davecgh/go-spew/spew"
    )

    func toAst(interfaceNode interface{}) ast.Ast {
        if (interfaceNode == nil) {
            return toAst(ast.NullExp{});
        }
        node := interfaceNode.(ast.Exp);
        return ast.NewAst(node);
    }

    func toAsts(astNodes []interface{}) []ast.Ast {
        a := make([]ast.Ast, len(astNodes));
        for i := 0; i < len(astNodes); i++ {
            a[i] = toAst(astNodes[i]);
        }
        return a;
    }
}

PROGRAM =  expressions:EXPRESSIONBLOCK {
    return toAst(expressions), nil
}

EXPRESSIONBLOCK = expressions:EXPRESSION* {
    return ast.ExpBlock{toAsts(expressions.([]interface{}))}, nil;
}

EXPRESSION = TRUELITERAL / FALSELITERAL / IF / RETURN

IF = _ "if" _ "(" check:EXPRESSIONBLOCK ")" _ "{" consequent:EXPRESSIONBLOCK "}" _ alternate:(ELSE)? _ {
    astNode := ast.If{toAst(check), toAst(consequent), toAst(alternate)};
    return astNode, nil
}

ELSE = _ "else" _ "{" alternate:EXPRESSION "}" _ {
    return alternate, nil;
}

RETURN = _ "return" _ expression:EXPRESSION {
    astNode := ast.Return{toAst(expression)};
    return astNode, nil;
}

TRUELITERAL = _ "true" _ {
    return ast.TrueLiteral{true}, nil;
}

FALSELITERAL = _ "false" _ {
    return ast.FalseLiteral{false}, nil;
}

_ ← ( Whitespace / EOL )*

Whitespace ← [ \t\r]
EOL ← '\n'
EOF ← !.
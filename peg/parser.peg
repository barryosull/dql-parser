{
    package peg

    import (
        "fmt"
        "parser/ast"
        "github.com/davecgh/go-spew/spew"
    )

    func exp(interfaceNode interface{}) ast.Exp {
        if (interfaceNode == nil) {
            return exp(ast.NullExp{});
        }
        node := interfaceNode.(ast.Exp);
        return ast.NewAst(node);
    }

    func exps(astNodes []interface{}) []ast.Exp {
        e := make([]ast.Exp, len(astNodes));
        for i := 0; i < len(astNodes); i++ {
            e[i] = exp(astNodes[i]);
        }
        return e;
    }
}

EXPRESSIONBLOCK = expressions:EXPRESSION* {
    return exp(ast.ExpBlock{exps(expressions.([]interface{}))}), nil;
}

EXPRESSION = TRUELITERAL / FALSELITERAL / IF / RETURN

IF = _ "if" _ "(" check:EXPRESSIONBLOCK ")" _ "{" consequent:EXPRESSIONBLOCK "}" _ alternate:(ELSE)? _ {
    astNode := ast.If{exp(check), exp(consequent), exp(alternate)};
    return astNode, nil
}

ELSE = _ "else" _ "{" alternate:EXPRESSION "}" _ {
    return alternate, nil;
}

RETURN = _ "return" _ expression:EXPRESSION {
    astNode := ast.Return{exp(expression)};
    return astNode, nil;
}

TRUELITERAL = _ "true" _ {
    return ast.TrueLiteral{true}, nil;
}

FALSELITERAL = _ "false" _ {
    return ast.FalseLiteral{false}, nil;
}

_ ← ( Whitespace / EOL )*

Whitespace ← [ \t\r]
EOL ← '\n'
EOF ← !.
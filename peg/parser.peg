{
    package peg

    import "parser/ast"

    func exp(astNode interface{}) ast.Exp {
        if (astNode == nil) {
            return ast.NullExp{};
        }
        return astNode.(ast.Exp);
    }
}

EXPRESSION = TRUELITERAL / FALSELITERAL / IF

IF = _ "if" _ "(" check:EXPRESSION ")" _ "{" consequent:EXPRESSION "}" _ alternate:(ELSE)? _ {
    astNode := ast.If{exp(check), exp(consequent), exp(alternate)};
    return astNode, nil
}

ELSE = _ "else" _ "{" alternate:EXPRESSION "}" _ {
    return alternate, nil;
}

TRUELITERAL = _ "true" _ {
    return ast.NewTrueLiteral(), nil;
}

FALSELITERAL = _ "false" _ {
    return ast.NewFalseLiteral(), nil;
}

_ ← ( Whitespace / EOL )*

Whitespace ← [ \t\r]
EOL ← '\n'
EOF ← !.
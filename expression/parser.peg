{
    package expression

    //import "fmt"
}

DOC = stats:STATEMENTBLOCK EOF {
    return stats, nil;
}

STATEMENTBLOCK = STATEMENT*

STATEMENT = RETURN SEMI / EXPRESSION SEMI

RETURN = "return" _ EXPRESSION

EXPRESSION = ARITHMETIC / ASSIGNMENT/ LOGICAL / COMPARISON / ATOMIC

ATOMIC = PARENTHESIS / NEW / METHODCALL / OBJECTACCESS / LITERAL / UNARY

LITERAL = STRING / FLOAT / BOOLEAN / NULL / INT  {
    return "LITERAL", nil;
}

NEW = "'" IDENTIFIER "'" _ ARGUMENTS

BOOLEAN  = "true"/"false" {
    return "BOOLEAN", nil;
}

NULL = "null" {
   return "NULL", nil;
}

STRING = "\"" [a-zA-Z0-9]* "\"" {
   return "STRING", nil;
}

INT = [0-9]+ {
   return "INT", nil;
}

FLOAT = [0-9]+ [.] [0-9]+ {
   return "FLOAT", nil;
}

IDENTIFIER = [a-zA-Z]+ [a-zA-Z0-9\\]* {
   return "IDENTIFIER", nil;
}

PARENTHESIS = "(" _ EXPRESSION _ ")" {
   return "PARENTHESIS", nil;
}

UNARY = INCREMENT / DECREMENT / NEGATE / NOT / POSITIVE

INCREMENT = OBJECTACCESS "++" {
    return "INCREMENT", nil;
}

DECREMENT = OBJECTACCESS "--" {
    return "DECREMENT", nil;
}

NEGATE = "-" OBJECTACCESS {
    return "NEGATE", nil;
}

NOT = "!" OBJECTACCESS {
    return "NOT", nil;
}

POSITIVE = "+" OBJECTACCESS {
    return "POSITIVE", nil;
}

ARITHMETIC = ATOMIC _ OPERATOR _ EXPRESSION {
    return "ARITHMETIC", nil;
}

OPERATOR = "+" / "-" / "/" / "*" / "%"

ASSIGNMENT = OBJECTACCESS _ "=" _ EXPRESSION

LOGICAL = IDENTIFIER _ ("and" / "or") _ ATOMIC

COMPARISON = IDENTIFIER _ ("===" / "!==" / "==" / "!=" / "<=" / ">=" / "<" / ">") _ EXPRESSION

METHODCALL = IDENTIFIER ARGUMENTS

OBJECTACCESS = ((METHODCALL / IDENTIFIER) "->")* (METHODCALL / IDENTIFIER)

ARGUMENTS = "(" ARGUMENTLIST? ")"

ARGUMENTLIST = (EXPRESSION _ "," _)* EXPRESSION

_ ← ( Whitespace / EOL )*

SEMI = _ ";" _

Whitespace ← [ \t\r]
EOL ← '\n'
EOF ← !.
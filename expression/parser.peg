{
    package expression
}

DOC = STATEMENTBLOCK EOF

STATEMENTBLOCK = STATEMENT*

STATEMENT = RETURN SEMI / EXPRESSION SEMI

RETURN = "return" _ EXPRESSION

EXPRESSION = ARITHMETIC / ASSIGNMENT/ LOGICAL / COMPARISON / ATOMIC

ATOMIC = PARENTHESIS / NEW / METHODCALL / OBJECTACCESS / LITERAL / UNARY

LITERAL = STRING / FLOAT / BOOLEAN / NULL / INT

NEW = "'" IDENTIFIER "'" _ ARGUMENTS

BOOLEAN  = "true"/"false"

NULL = "null"

STRING = "\"" [a-zA-Z0-9]* "\""

INT = [0-9]+

FLOAT = [0-9]+ [.] [0-9]+

IDENTIFIER = [a-zA-Z]+ [a-zA-Z0-9\\]*

PARENTHESIS = "(" _ EXPRESSION _ ")"

UNARY = INCREMENT / DECREMENT / NEGATE / NOT / POSITIVE

INCREMENT = OBJECTACCESS "++"

DECREMENT = OBJECTACCESS "--"

NEGATE = "-" OBJECTACCESS

NOT = "!" OBJECTACCESS

POSITIVE = "+" OBJECTACCESS

ARITHMETIC = ATOMIC _ OPERATOR _ EXPRESSION

OPERATOR = "+" / "-" / "/" / "*" / "%"

ASSIGNMENT = OBJECTACCESS _ "=" _ EXPRESSION

LOGICAL = IDENTIFIER _ ("and" / "or") _ ATOMIC

COMPARISON = IDENTIFIER _ ("===" / "!==" / "==" / "!=" / "<=" / ">=" / "<" / ">") _ EXPRESSION

METHODCALL = IDENTIFIER ARGUMENTS

OBJECTACCESS = ((METHODCALL / IDENTIFIER) "->")* (METHODCALL / IDENTIFIER)

ARGUMENTS = "(" ARGUMENTLIST? ")"

ARGUMENTLIST = (EXPRESSION _ "," _)* EXPRESSION

_ ‚Üê ( Whitespace / EOL )*

SEMI = _ ";" _

Whitespace = [ \t\r]
EOL = '\n'
EOF = !.
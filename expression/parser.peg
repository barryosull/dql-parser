{
    package expression
}

DOC = exp:EXPRESSION EOF {
    return exp, nil;
}

EXPRESSION = ARITHMETIC / ASSIGNMENT/ LOGICAL / COMPARISON / METHODCALL / OBJECTACCESS / LITERAL / IDENTIFIER / PARENTHESIS / UNARY

LITERAL = STRING / FLOAT / BOOLEAN / NULL / INT  {
    return "LITERAL", nil;
}

BOOLEAN  = "true"/"false" {
    return "BOOLEAN", nil;
}

NULL  = "null" {
   return "NULL", nil;
}

STRING = "\"" [a-zA-Z0-9]* "\"" {
   return "STRING", nil;
}

INT = [0-9]+ {
   return "INT", nil;
}

FLOAT = [0-9]+ [.] [0-9]+ {
   return "FLOAT", nil;
}

IDENTIFIER = [a-zA-Z]+ [a-zA-Z0-9]* {
   return "IDENTIFIER", nil;
}

PARENTHESIS = "(" _ EXPRESSION _ ")" {
   return "PARENTHESIS", nil;
}

UNARY = INCREMENT / DECREMENT / NEGATE / NOT / POSITIVE

INCREMENT = IDENTIFIER "++" {
    return "INCREMENT", nil;
}

DECREMENT = IDENTIFIER "--" {
    return "DECREMENT", nil;
}

NEGATE = "-" IDENTIFIER {
    return "NEGATE", nil;
}

NOT = "!" IDENTIFIER {
    return "NOT", nil;
}

POSITIVE = "+" IDENTIFIER {
    return "POSITIVE", nil;
}

ARITHMETIC = IDENTIFIER _ OPERATOR _ EXPRESSION

OPERATOR = "+" / "-" / "/" / "*" / "%"

ASSIGNMENT = OBJECTACCESS _ "=" _ EXPRESSION

LOGICAL = IDENTIFIER _ ("and" / "or") _ EXPRESSION

COMPARISON = IDENTIFIER _ ("===" / "!==" / "==" / "!=" / "<=" / ">=" / "<" / ">") _ EXPRESSION

METHODCALL = IDENTIFIER "(" ARGUMENTS? ")"

OBJECTACCESS = (IDENTIFIER "->")* IDENTIFIER

ARGUMENTS = (EXPRESSION _ "," _)* EXPRESSION

_ ← ( Whitespace / EOL )*

Whitespace ← [ \t\r]
EOL ← '\n'
EOF ← !.